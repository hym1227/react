{"version":3,"sources":["components/list.js","components/input.js","components/TodoList.js","index.js"],"names":["List","renderTodos","done","props","data","map","todo","idx","String","key","title","onClick","toggle","checked","type","style","color","dangerouslySetInnerHTML","__html","removeTodos","this","Component","Input","htmlFor","id","ref","inp","input","value","inpValue","onChange","handleChange","addTodo","TodoList","e","setState","target","state","todos","filter","item","index","newTodos","JSON","parse","stringify","localStorage","getItem","console","log","setItem","arr1","arr2","backgroundColor","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0f71b52.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class List extends Component {\r\n\r\n  renderTodos = (done) => {\r\n    const todos = this.props.data;\r\n    return todos.map((todo, idx) => {\r\n      if (done == String(todo.done)) {\r\n        return <li key={todo.title}>\r\n          <input\r\n            onClick={() => this.props.toggle(idx)}\r\n            checked={todo.done}\r\n            type=\"checkbox\"\r\n          />\r\n          <span style={{ color: 'grey' }} dangerouslySetInnerHTML={{ __html: todo.title }}></span>\r\n          {/* 防止危险的输入 */}\r\n          <button style={{ color: 'brown' }} onClick={() => this.props.removeTodos(idx)}>删除</button>\r\n          {/* 箭头函数才能实现触发事件的时候传递参数 */}\r\n        </li>\r\n      }\r\n      else {\r\n\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.renderTodos(this.props.done)}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"inp\" style={{ color: 'grey' }}>TodoList</label>\r\n                <input\r\n                    id=\"inp\"\r\n                    ref={inp => this.input = inp}\r\n                    value={this.props.inpValue}\r\n                    type=\"text\"\r\n                    onChange={this.props.handleChange} />\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component, createElement } from 'react'\r\nimport List from './list'\r\nimport Input from './input'\r\n\r\nexport default class TodoList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos: [{ title: '1', done: false },\r\n            { title: '2', done: true },\r\n            { title: '3', done: true },\r\n            { title: '4', done: false }]\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {//数据可以输入到界面\r\n        this.setState({ inpValue: e.target.value })\r\n\r\n    }\r\n    componentDidMount() {\r\n        let todos = localStorage.getItem('todos');\r\n        if (todos) {\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate() {//是否要更新页面，在更新的时候保留上次做的操作\r\n        console.log(4);\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n\r\n        )\r\n    }\r\n    addTodo = () => {//添加数据到界面\r\n\r\n        if (this.state.inpValue == '') {//当输入是空值的时候不添加\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({\r\n                todos: [\r\n                    {\r\n                        title: this.state.inpValue,\r\n                        done: false\r\n                    },\r\n                    ...this.state.todos//...展开运算符，扩展运算符\r\n                ]\r\n            })\r\n            this.setState({ inpValue: '' });//异步执行，不一定谁先执行\r\n        }\r\n    }\r\n    removeTodos = (idx) => {//删除数组中的数据行\r\n\r\n        this.setState({//新的数组在比较的时候好比较，和原来不同\r\n            todos: this.state.todos.filter((item, index) => index != idx)//只要index不等于idx的就返回过来\r\n        }\r\n        )//setState是异步执行的，这样子就可以解决同步存储之间的关系\r\n\r\n    }\r\n    toggle = (index) => {\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));//深拷贝出来一份,地址会变成新的地址（变成一个字符串在变成一个对象）\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { todos, inpValue } = this.state;\r\n        let arr1 = todos.filter((item, index) => item.done);\r\n        let arr2 = todos.filter((item, index) => !item.done);\r\n\r\n\r\n        return (\r\n\r\n            <div style={{ backgroundColor: 'MediumOrchid' }}>\r\n                <Input inpValue={inpValue} handleChange={this.handleChange} addTodo={this.addTodo} />\r\n                <h2 style={{ color: 'grey' }}>正在进行        {arr2.length}   </h2>\r\n                <List done='false' data={todos} toggle={this.toggle} removeTodos={this.removeTodos} />\r\n                <h2 style={{ color: 'grey' }}>已经完成        {arr1.length}   </h2>\r\n                <List done='true' data={todos} toggle={this.toggle} removeTodos={this.removeTodos} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './components/TodoList.js';\n\nReactDOM.render(\n  <TodoList />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}